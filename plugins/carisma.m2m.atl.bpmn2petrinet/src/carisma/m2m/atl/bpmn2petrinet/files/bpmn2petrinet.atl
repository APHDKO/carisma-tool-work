-- @path Petrinet=/carisma.m2m.atl.bpmn2petrinet/res/petrinet.ecore
-- @nsURI BPMN2=/carisma.m2m.atl.bpmn2petrinet/res/bpmn2.ecore

module bpmn2petrinet;
create OUT : Petrinet from IN : BPMN2;

rule Model2PetriNet {
	from
		s : BPMN2!Definitions
	to
		t : Petrinet!PetriNet (
			name <- s.name,
			nodes <- BPMN2!FlowNode.allInstances()
				.union(BPMN2!FlowNode.allInstances() -> collect(t | thisModule.resolveTemp(t, 't_start')))
				.union(BPMN2!FlowNode.allInstances() -> collect(t | thisModule.resolveTemp(t, 't_end'))),
			arcs <- BPMN2!SequenceFlow.allInstances()
				.union(BPMN2!FlowNode.allInstances() -> collect(t | thisModule.resolveTemp(t, 'a_start')))
				.union(BPMN2!FlowNode.allInstances() -> collect(t | thisModule.resolveTemp(t, 'a_end')))
		)
}

rule SequenceFlow2Arc {
	from
		s : BPMN2!SequenceFlow
	to 
		arc : Petrinet!Arc (
			name <- s.name,
			source <- thisModule.resolveTemp(s.sourceRef, 't_end'),
			target <- thisModule.resolveTemp(s.targetRef, 't_start')
		)
}

rule addInitialMarking (place : Petrinet!Place) {
	to 
		token : Petrinet!Token (
			name <- 'Token' + (Petrinet!Token.allInstances().size() - 1)
		)
	do {
		place.marking <- token;	
	}
}

rule FlowNode2Place {
	from
		s : BPMN2!FlowNode
	to 		
		p: Petrinet!Place (
			name <- s.name
		),
		
		t_start : Petrinet!Transition (
			name <- s.name + '_start'
		),
		
		t_end : Petrinet!Transition (
			name <- s.name + '_end' 	
		),
		
		a_start : Petrinet!Arc (
			name <- s.name + '_start',
			source <- t_start,
			target <- p
		),
		
		a_end :  Petrinet!Arc (
			name <- s.name + '_end',
			source <- p,
			target <- t_end
		)		
	
	do {
		if (s.oclIsKindOf(BPMN2!StartEvent)) 
			thisModule.addInitialMarking(p);
	}
}