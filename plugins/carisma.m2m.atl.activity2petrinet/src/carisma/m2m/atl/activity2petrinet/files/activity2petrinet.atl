-- @path Petrinet=/carisma.m2m.activity2petrinet/ecore/petrinet.ecore
-- @nsURI UML2=http://www.eclipse.org/uml2/3.0.0/UML

module activity2petrinet2;
create OUT : Petrinet from IN : UML2;

helper context UML2!ActivityNode def: isInitialNode(): Boolean =
	self.oclType() = UML2!InitialNode;

rule Model2PetriNet {
	from
		s : UML2!Model
	to 
		t : Petrinet!PetriNet (
			name <- s.name,
			nodes <- UML2!ActivityNode.allInstances()
				.union(UML2!ActivityNode.allInstances() -> collect(t | thisModule.resolveTemp(t, 't_start')))
				.union(UML2!ActivityNode.allInstances() -> collect(t | thisModule.resolveTemp(t, 't_end'))),
			arcs <- UML2!ControlFlow.allInstances()
				.union(UML2!ActivityNode.allInstances() -> collect(t | thisModule.resolveTemp(t, 'a_start')))
				.union(UML2!ActivityNode.allInstances() -> collect(t | thisModule.resolveTemp(t, 'a_end')))
		)
}

rule ControlFlow2Arc {
	from
		s : UML2!ControlFlow
	to 
		arc : Petrinet!Arc (
			name <- s.name,
			source <- thisModule.resolveTemp(s.source, 't_end'),
			target <- thisModule.resolveTemp(s.target, 't_start')
		)
}

rule addInitialMarking (place : Petrinet!Place) {
	to 
		token : Petrinet!Token (
			name <- 'Token' + (Petrinet!Token.allInstances().size() - 1)
		)
	do {
		place.marking <- token;	
	}
}

rule Node2Place {
	from
		s : UML2!ActivityNode
	to 		
		p: Petrinet!Place (
			name <- s.name
		),
		
		t_start : Petrinet!Transition (
			name <- s.name + '_start'
		),
		
		t_end : Petrinet!Transition (
			name <- s.name + '_end' 	
		),
		
		a_start : Petrinet!Arc (
			name <- s.name + '_start',
			source <- t_start,
			target <- p
		),
		
		a_end :  Petrinet!Arc (
			name <- s.name + '_end',
			source <- p,
			target <- t_end
		)		
	
	do {
		if (s.oclIsKindOf(UML2!InitialNode)) 
			thisModule.addInitialMarking(p);
	}
}

--rule InitialNode extends NormalNode {
--	from
--		s : UML2!ActivityNode(
--			s.isInitialNode())
--	to 
--		token : Petrinet!Token (
--			name <- 'Token'
--		),
--		
--		place : Petrinet!Place (
--			name <- s.name,
--			marking <- token
--		)		
--}